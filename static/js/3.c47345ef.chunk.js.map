{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileDataForm.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","profileHeader","descriptionBlock","postsBlock","posts","item","Post","props","React","createElement","className","s","src","userPhoto","message","likesCount","maxLength30","maxLengthCreator","AddNewPostReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","validate","required","component","Textarea","name","placeholder","MyPosts","postsElements","map","p","key","id","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","addPostActionCreator","ProfileStatusWithHooks","_useState","useState","_useState2","_slicedToArray","editMode","setEditMode","_useState3","status","_useState4","setStatus","useEffect","autoFocus","onBlur","updateUserStatus","value","onChange","e","currentTarget","onDoubleClick","ProfileDataReduxForm","enableReinitialize","_ref","profile","error","createField","Input","type","Object","keys","contacts","contact","style","formSummaryError","ProfileData","_ref2","isOwner","onSelectedEditMode","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","contactTitle","contactValue","onClick","_ref3","ProfileInfo","fullName","savePhoto","saveProfile","Preloader","formData","then","userId","photos","large","target","files","length","ProfileDataForm","initialValues","Profile","captchaUrl","compose","authorizedUserId","auth","isAuth","getUserProfile","setFullName","setUserId","getUserStatus","withRouter","withAuthNavigate","match","params","router","navigate","refreshProfile","assign"],"mappings":"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","file":"static/js/3.c47345ef.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileHeader\":\"ProfileInfo_profileHeader__2TAzG\",\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1JHG4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__10R-V\",\"posts\":\"MyPosts_posts__36ghe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1jiMs\"};","import React from 'react';\nimport s from './Post.module.css';\nimport userPhoto from '../../../../assets/images/user.png'\n\nconst Post = (props) => {\n\n    return (\n        <div className={s.item}>\n            <img src={userPhoto}/>\n            {props.message}\n            <div>\n                <span>\n                    like: {props.likesCount}\n                </span>\n            </div>\n        </div>\n    );\n};\n\nexport default Post;                                                                                                                  ","import React from 'react';\nimport s from './MyPosts.module.css';\nimport Post from './Post/Post';\nimport {Field, reduxForm} from \"redux-form\";\nimport {maxLengthCreator, required} from \"../../../utilities/validators/Validators\";\nimport {Textarea} from \"../../Common/FormsControls/FormsControls\";\n\nconst MyPosts = (props) => {\n\n    let postsElements = props.posts.map(p =>\n        <Post key={p.id}\n              id={p.id}\n              message={p.message}\n              likesCount={p.likesCount}/>)\n\n    let addNewPost = (values) => {\n        props.addPost(values.newPostText);\n    }\n\n    return (\n        <div className={s.postsBlock}>\n            <h3>My posts</h3>\n            <div>\n                <AddNewPostReduxForm onSubmit={addNewPost}/>\n            </div>\n            <div className={s.posts}>\n                {postsElements}\n            </div>\n        </div>\n    );\n};\n\nconst maxLength30 = maxLengthCreator(30)\n\nconst AddNewPostForm = (props) => {\n    return (\n        <form onSubmit={props.handleSubmit}>\n            <div>\n                <Field validate={[required, maxLength30]}\n                       component={Textarea}\n                       name='newPostText'\n                       placeholder='Enter new text'/>\n            </div>\n            <div>\n                <button>Add post</button>\n            </div>\n\n        </form>\n    )\n}\n\nlet AddNewPostReduxForm = reduxForm({form: 'myPostForm'})(AddNewPostForm)\n\nexport default MyPosts;\n","import { connect } from 'react-redux';\nimport { addPostActionCreator} from '../../../redux/profile-reducer';\nimport MyPosts from './MyPosts';\n\nlet mapStateToProps = (state) => {\n  return {\n    posts: state.profilePage.posts,\n    newPostText: state.profilePage.newPostText,\n\n  }\n}\n\nlet mapDispatchToProps = (dispatch) => {\n  return {\n\n    addPost: (newPostText) => {\n      dispatch(addPostActionCreator(newPostText))\n    }\n  }\n}\n\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\n\n\n\n\nexport default MyPostsContainer;","import React, {useEffect, useState} from 'react';\n\nconst ProfileStatusWithHooks = (props) => {\n\n    let [editMode, setEditMode] = useState(false);\n    let [status, setStatus] = useState(props.status)\n\n    useEffect(() => {\n        setStatus(props.status)\n    }, [props.status])\n\n    let onStatusChange = (e) => {\n        setStatus(e.currentTarget.value)\n    }\n\n    const activateEditMode = () => {\n        setEditMode(true)\n    }\n\n    const deactivateEditMode = () => {\n        setEditMode(false)\n        props.updateUserStatus(status);\n    }\n\n    return (\n        <div>\n            {editMode ?\n                <div>\n                    <input autoFocus={true}\n                           onBlur={deactivateEditMode}\n                           value={status}\n                           onChange={onStatusChange}\n                    />\n                </div>\n                :\n                <div>\n                    <span onDoubleClick={activateEditMode}>{props.status || '---'}</span>\n                </div>\n            }\n        </div>\n    );\n}\nexport default ProfileStatusWithHooks;","import React from \"react\";\nimport {createField, Input, Textarea} from \"../../Common/FormsControls/FormsControls\";\nimport {reduxForm} from \"redux-form\";\nimport style from '../../Common/FormsControls/FormsControls.module.css'\nimport s from '../ProfileInfo/ProfileInfo.module.css';\n\nconst ProfileDataForm = ({handleSubmit, profile, error}) => {\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <p>\n                <b>Full name:</b>\n                {createField(\n                    [], 'Full name', 'fullName', Input)}\n            </p>\n            <p>\n                <b>Looking for a job:</b>\n                {createField(\n                    [], '', 'lookingForAJob', Input, '', {type: 'checkbox'})}\n            </p>\n            <p>\n                <b>My professional skills:</b>\n                {createField(\n                    [], 'Yours professional skills', 'lookingForAJobDescription', Textarea)}\n            </p>\n            <p>\n                <b>About me</b>\n                {createField(\n                    [], 'Info about you', 'aboutMe', Textarea)}\n            </p>\n            <div>\n                <b> -My Contacts- </b> {Object.keys(profile.contacts).map(key => {\n                return (\n                    <div className={s.contact} key={key}>\n                        <b>\n                            {key}: {createField(\n                            [], key, \"contacts.\" + key, Input)}\n                        </b>\n                    </div>\n                )\n            })\n            }\n            </div>\n            <p>   {error &&\n                <div className={style.formSummaryError}>\n                    {error}\n                </div>\n            }\n            </p>\n            <p>\n                <div>\n                    <button>Save profile info</button>\n                </div>\n            </p>\n        </form>\n    )\n}\n\nconst ProfileDataReduxForm = reduxForm({form: 'editProfile', enableReinitialize: true})(ProfileDataForm)\n\nexport default ProfileDataReduxForm","import React, {useState} from 'react';\nimport s from './ProfileInfo.module.css';\nimport Preloader from \"../../Common/Preloader/Preloader\";\nimport ProfileStatusWithHooks from \"./ProfileStatusWithHooks\";\nimport userPhoto from '../../../assets/images/user.png'\nimport ProfileDataForm from \"./ProfileDataForm\";\n\nconst ProfileInfo = ({profile, fullName, status, updateUserStatus, isOwner, savePhoto, saveProfile}) => {\n\n    let [editMode, setEditMode] = useState(false);\n\n    if (!profile || !fullName) {\n        return <Preloader/>\n    }\n\n    const onChangeUserPhoto = (e) => {\n        if (e.target.files.length) {\n            savePhoto(e.target.files[0]);\n        }\n    }\n\n    let onSelectedEditMode = () => {\n        setEditMode(true)\n    }\n\n    let onSubmit = (formData) => {\n        saveProfile(formData).then(\n            () => {\n                setEditMode(false)\n            }\n        )\n    }\n\n    return (\n        <div>\n            <div className={s.profileHeader}>\n                <hr/>\n            </div>\n            <div className={s.fullName}>\n                {fullName} (ID: {profile.userId})\n            </div>\n            <div className={s.descriptionBlock}>\n                <img src={profile.photos.large || userPhoto}/>\n            </div>\n            <div>{isOwner && <input type=\"file\" onChange={onChangeUserPhoto}/>}</div>\n            <div>\n                {editMode\n                    ? <ProfileDataForm initialValues={profile}\n                                       profile={profile}\n                                       onSubmit={onSubmit}/>\n\n                    : <ProfileData onSubmit={onSubmit}\n                                   profile={profile}\n                                   status={status}\n                                   updateUserStatus={updateUserStatus}\n                                   editMode={editMode}\n                                   onSelectedEditMode={onSelectedEditMode}\n                                   isOwner={isOwner}\n                    />}\n            </div>\n\n\n        </div>\n    )\n}\n\nconst ProfileData = ({profile, status, updateUserStatus, isOwner, onSelectedEditMode}) => {\n    return (\n        <p>\n            <div>\n                <p>\n                    <b> Status: </b><ProfileStatusWithHooks status={status} updateUserStatus={updateUserStatus}/>\n                </p>\n                <b> -My info- </b>\n                <div>\n                    Looking for a job: {profile.lookingForAJob ? 'Yes' : 'No'}\n                    {profile.lookingForAJob &&\n                        <div>My professional skills: {profile.lookingForAJobDescription}</div>}\n                </div>\n                <div>\n                    <p>\n                        <b>-About me-</b>\n                        <div>{profile.aboutMe}</div>\n                    </p>\n                </div>\n                <p>\n                    <div>\n                        <b> -My Contacts- </b> {Object.keys(profile.contacts).map(key => {\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key]}/>\n                    })\n                    }\n                    </div>\n                    <div>\n                        {isOwner && <button onClick={onSelectedEditMode}>Edit Profile Info</button>}\n                    </div>\n\n                </p>\n            </div>\n        </p>\n    )\n}\n\nconst Contact = ({contactTitle, contactValue}) => {\n    return <div>{contactTitle}: {contactValue}</div>\n}\n\nexport default ProfileInfo;","import React from 'react';\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\nimport ProfileInfo from './ProfileInfo/ProfileInfo';\n\nconst Profile = (props) => {\n\n    return (\n        <div className='app-wrapper-content'>\n            <ProfileInfo status={props.status}\n                         isOwner={props.isOwner}\n                         profile={props.profile}\n                         fullName={props.fullName}\n                         userId={props.userId}\n                         updateUserStatus={props.updateUserStatus}\n                         savePhoto={props.savePhoto}\n                         saveProfile={props.saveProfile}\n                         captchaUrl={props.captchaUrl}\n            />\n            <MyPostsContainer/>\n        </div>\n    )\n}\n\nexport default Profile;","import React, {useEffect} from 'react';\nimport Profile from \"./Profile\";\nimport {connect} from \"react-redux\";\nimport {\n    getUserProfile,\n    getUserStatus,\n    savePhoto, saveProfile,\n    setFullName,\n    setUserId,\n    updateUserStatus\n} from \"../../redux/profile-reducer\";\nimport {withAuthNavigate} from \"../../HOC/withAuthNavigate\";\nimport {compose} from \"redux\";\nimport {withRouter} from \"../../HOC/withRouterComponent\";\n\nconst ProfileContainer = (props) => {\n\n    let refreshProfile = () => {\n        let userId = props.match.params.userId;\n\n        if (!userId) {\n            userId = props.authorizedUserId;\n        }\n\n        if (!userId) {\n            props.router.navigate('login')\n        }\n\n        props.getUserProfile(userId);\n        props.getUserStatus(userId);\n\n        if (!props.match.params.userId) {\n            return <Profile {...props}/>\n        }\n    }\n\n    useEffect( () => {\n        refreshProfile()\n    },[props.match.params.userId]  )\n\n    // componentDidMount() {\n    //     refreshProfile();\n    // }\n\n    // componentDidUpdate(prevProps, prevState, snapshot) {\n    //     if (props.match.params.userId !== prevProps.match.params.userId) {\n    //         refreshProfile();\n    //     }\n    // }\n\n        return (\n            <Profile isOwner={!props.match.params.userId} {...props}/>\n        )\n}\n\nconst mapStateToProps = (state) => ({\n    profile: state.profilePage.profile,\n    fullName: state.profilePage.fullName,\n    userId: state.profilePage.userId,\n    status: state.profilePage.status,\n    authorizedUserId: state.auth.userId,\n    isAuth: state.auth.isAuth,\n\n})\n\nexport default compose(\n    connect(mapStateToProps, {\n        getUserProfile, setFullName, setUserId, getUserStatus, updateUserStatus, savePhoto, saveProfile\n    }),\n    withRouter,\n    withAuthNavigate\n)\n(ProfileContainer)"],"sourceRoot":""}